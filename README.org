#+STARTUP: showall indent
#+OPTIONS: tex:t title:t toc:nil
#+ODT_STYLES_FILE: "/Users/gilgamesh/Google Drive/Templates/styles.xml"

#+TITLE: Configuring MacOS Catalina for Research Computing
#+AUTHOR: Derek Devnich

* Login
1. Remove password quality restrictions
   #+BEGIN_SRC bash
   pwpolicy -clearaccountpolicies
   #+END_SRC
2. Disable Global Protect VPN autostart
   https://www.robertsetiadi.com/disabling-globalprotect-vpn-auto-run-during-mac-start-up/
3. Manually kill and restart Global Protect VPN (via https://joshcurry.co.uk/posts/how-to-quit-globalprotect-mac/)
   #+BEGIN_SRC bash
   launchctl unload /Library/LaunchAgents/com.paloaltonetworks.gp.pangp*
   launchctl load /Library/LaunchAgents/com.paloaltonetworks.gp.pangp*
   #+END_SRC

* Firewall
Enable and activate stealth mode

* SSH
1. If you are a Windows 10 user, you will need to install Git for Windows: https://gitforwindows.org
2. If you have a ~.ssh~ directory in your old machine's home directory, copy that directory to your new machine.
3. Otherwise, create a new ~.ssh~ directory and generate a public/private key pair. On MacOS or Linux, open the Terminal application; on Windows 10, open the Powershell application. Then:
   #+BEGIN_SRC bash
   cd ~/
   mkdir .ssh
   ssh-keygen -t ed25519 -C "<your email address>"
   #+END_SRC
   1. You will be prompted to enter a file name for the keys. Press Return to accept the default.
   2. You we be prompted to enter a passphrase. Type a passphrase and press Return (the Terminal will not display your password while you are typing).
4. Set permissions for .ssh directory and keys.
   1. MacOS/Linux:
      #+BEGIN_SRC bash
      cd ~/
      chmod 700 .ssh/                 # .ssh directory
      cd .ssh/
      chmod 600 *                     # private keys and other files
      chmod 644 *.pub                 # public keys
      #+END_SRC
   2. Windows 10:
      TO DO
      #+BEGIN_SRC shell
      #+END_SRC
5. If you have more than one key pair, create a configuration file (~.ssh/config~) that lists the resolution order for the keys. The ~ssh~ command will try the keys in order until one succeeds. The contents of ~config~ should follow this template:
   #+BEGIN_SRC bash
   IdentityFile ~/.ssh/<key_file_1>
   IdentityFile ~/.ssh/<key_file_2>
   # et cetera
   #+END_SRC

* DNS
Configure in System Preferences \rightarrow Network \rightarrow WiFi \rightarrow Advanced \rightarrow DNS
** DNS Servers
#+BEGIN_SRC bash
9.9.9.9
2620:fe::fe
2620:fe::9
8.8.8.8
#+END_SRC
** Search Domains
#+BEGIN_SRC bash
duckduckgo.com
google.com
#+END_SRC

* Fonts
Download and install DejaVu fonts

* Enable Safari show URL on mouseover
View menu >  show status bar

* Give some programs permission to access the entire directory structure
Configure in System Preferences \rightarrow Security & Privacy
** Accessibility tab
1. Terminal
2. Emacs
** Full Disk Access tab
1. Terminal
2. Emacs
** Developer Tools tab
The "Developer Tools" tab will appear when you run the command to enable developer mode for the terminal (step 1 below)
1. Terminal
   #+BEGIN_SRC bash
   # Enable Developer Tools tab and add Terminal to it
   sudo spctl developer-mode enable-terminal
   #+END_SRC
2. Emacs
3. gls (once installed)
4. ispell (once installed)
5. movemail (once installed)
6. nix (once installed)

* Install XCode Command Line Tools (git and clang)
You can install Git on your Mac using one of the following methods (we list more than one method because sometimes your permission settings will prevent one of the methods from working. Start at the top of the list and work your way down).
1. Method 1: Install from the terminal (v1)
   #+BEGIN_SRC bash
   clang --version
   #+END_SRC
   Follow on-screen prompts to install
2. Method 2: Install from the terminal (v2)
   #+BEGIN_SRC bash
   xcode-select --install
   #+END_SRC
3. Method 3: Manually download the latest version of "Command Line Tools for XCode" from https://developer.apple.com/download/more/

* Update XCode Command Line Tools
1. Search for software updates
   #+BEGIN_SRC bash
   softwareupdate --list
   #+END_SRC
2. Install using full name
   #+BEGIN_SRC bash
   softwareupdate -i "Command Line Tools (macOS High Sierra version 10.13) for Xcode-10.1"
   #+END_SRC

* Install the Nix Package Manager
Following https://www.philipp.haussleiter.de/2020/04/fixing-nix-setup-on-macos-catalina/
   #+BEGIN_SRC bash
   #+END_SRC
1. Verify that your file system is APFS
   #+BEGIN_SRC bash
   diskutil list | grep APFS
   #+END_SRC
2. Create a new APFS disk volume called "nix" using Disk Utility
3. Create a mount point by adding the volume name to /etc/synthetic.conf:
   #+BEGIN_EXAMPLE
   nix
   #+END_EXAMPLE
4. Reboot. This will create the "/nix" mount point.
5. Get the disk volume partition for the /nix mount point.
   #+BEGIN_SRC bash
   diskutil list | grep APFS | grep nix
   #+END_SRC
6. Use the volume partition number to find its UUID
   #+BEGIN_SRC bash
   diskutil info /dev/disk1s6 | grep UUID
   #+END_SRC
7. Create and edit /etc/fstab, preferably using vifs (note that vifs uses vi keybindings). Be sure to use *your* UUID, not the UUID in the example.
   #+BEGIN_SRC bash
   sudo vifs
   #+END_SRC

   #+BEGIN_EXAMPLE
   UUID=78012913-F18F-4CB5-9CF0-CFFBB609692C /nix apfs rw
   #+END_EXAMPLE
8. Reboot.
9. Create ~.profile~ in home directory
11. Download the nix installation script from https://nixos.org/nix/install as "install.sh", then execute:
   #+BEGIN_SRC bash
   sh install.sh
   #+END_SRC
12. Copy contents of ~.profile~ to ~.zshrc~ (or rename ~.profile~ to ~.zshrc~ if it doesn't already exist)

* Install packages with Nix package manager
1. Emacs
   1. Install with Nix
      #+BEGIN_SRC bash
      nix-env -i emacs-26.3
      #+END_SRC
   2. Create symbolic link from application location to Applications folder
      #+BEGIN_SRC bash
      sudo su
      cd /Applications/
      ln -s /nix/var/nix/profiles/per-user/gilgamesh/profile/Applications/Emacs.app Emacs.app
      #+END_SRC
2. coreutils (required for emacs)
   1. Get complete version information for all of the package variants. We are looking for the "prefixed" version of the GNU/Linux utilities (e.g., the ~ls~ command will be installed as ~gls~). This prevents us from overriding the built-in BSD versions of the commands.
      #+BEGIN_SRC bash
      nix-env -qasP coreutils
      #+END_SRC
   2. Install "g"-prefixed version
      #+BEGIN_SRC bash
      nix-env -iA nixpkgs.coreutils-prefixed
      #+END_SRC
3. ispell (required for Emacs)
4. darcs (required for Emacs interaction with /usr/share/zsh/5.7.1/functions)
5. fish (required for Derek's Emacs configuration)
6. htop
7. stow (required for managing dot files)
8. imagemagick
   #+BEGIN_SRC bash
     nix-env -i ghostscript
     nix-env -iA nixpkgs.imagemagick7
   #+END_SRC
9. nano
10. sox (optional, for editing sound files)

* Update Nix packages
1. Update channels
  #+BEGIN_SRC bash
  nix-channel --update
  #+END_SRC
2. Upgrade packages
  #+BEGIN_SRC bash
    nix-env -u --dry-run            # See what packages will be upgraded
    nix-env -u                      # Run upgrade
  #+END_SRC
3. Delete and recreate symbolic links for apps

* Install XQuartz
https://www.xquartz.org

* Shell configuration
Clone the dot file repository https://github.com/devnich/dotfiles into your home directory and follow the installation instructions in the README. Note that some files (e.g., ~.zshenv~, ~.nix-channel~) may conflict with files you have already created during the setup process. If this happens, you should merge the contents of each "live" file into its respective repository version before running the ~stow~ command.

* Force Office to save locally
1. Stay signed out of office
2. Tweak privacy settings: https://docs.microsoft.com/en-us/deployoffice/privacy/mac-privacy-preferences

* Install Python Anaconda distribution
1. Install Python 3 version
   After installation, ~which python~ should report that Python is installed in ~/Users/<your user name>/opt/anaconda3/bin/python~. If it reports the system Python location, copy the relevant lines from ~.bash_profile~ to ~.zshrc~.
2. Deactivate Anaconda to use system Python or utilities
  #+BEGIN_SRC bash
    # Deactivate Anaconda install
    conda deactivate
    which python                    # outputs /usr/bin/python
    # Reactivate
    conda activate
    which python                    # outputs /Users/<user_name>/opt/anaconda3/bin/python
  #+END_SRC
3. Check for updates
  #+BEGIN_SRC bash
  conda update --all --dry-run
  #+END_SRC
4. Update conda package manager (may also update other packages)
  #+BEGIN_SRC bash
  conda update -n base conda
  #+END_SRC
5. Update default (base) environment
  #+BEGIN_SRC bash
  conda update --all
  #+END_SRC
6. Find new packages
  #+BEGIN_SRC bash
  conda search -i/v <package-name>
  #+END_SRC
7. Install new packages
  #+BEGIN_SRC bash
  conda install <package-name>
  #+END_SRC
8. Create Python virtual environments
  #+BEGIN_SRC bash
    # Create environment with selected libraries
    conda create -n <env name> google-api-python-client pandas
    # Alternatively, create a new environment cloned from a preexisting environment
    conda create -n <env name> --clone base
    # Show environment
    conda env list
    # Switch to environment
    conda activate <env name>
    # Install additional software with pip; always do this last
    pip install search_sampler
    #  Remove environment
    conda env remove -n <env name>
  #+END_SRC

* Install R
1. Install R from CRAN: https://cran.r-project.org
2. Install RStudio IDE
3. Use R language manager to install libraries, e.g.
   #+BEGIN_SRC r
   install.packages("tidyverse")
   #+END_SRC
4. Check whether R is available as a Jupyter kernel (optional)
   #+BEGIN_SRC bash
   jupyter kernelspec list
   #+END_SRC
5. If R kernel not listed, install it (optional)
   #+BEGIN_SRC r
   install.packages('IRkernel')
   IRkernel::installspec()
   #+END_SRC
6. If installing TinyTeX (Bookdown dependency), change owner of "/usr/local/bin"
   #+BEGIN_SRC bash
   sudo chown -R `whoami`:admin /usr/local/bin
   #+END_SRC

** Build Bookdown book (e.g., "Advanced R")
c.f. https://bookdown.org/yihui/bookdown/build-the-book.html
#+BEGIN_SRC R
bookdown::render_book() # Test for dependencies via repeated failure
bookdown::render_book('index.Rmd', 'bookdown::pdf_book')
#+END_SRC

* Restore from CrashPlan
1. View web console: https://www.crashplan.com/console
2. Restart CrashPlan service
   #+BEGIN_SRC bash
   # Stop Crashplan
   sudo launchctl unload /Library/LaunchDaemons/com.code42.service.plist
   # Start Crashplan
   sudo launchctl load /Library/LaunchDaemons/com.code42.service.plist
   #+END_SRC

* Install CLAN
1. Give full disk access to Terminal
   1. Go to System Preferences \rightarrow Security & Privacy \rightarrow Full Disk Access
   2. Check Terminal (or add with + if it doesn't already appear in the list of programs)
2. Install XCode Command Line Tools
   1. Open Terminal
   2. Type "clang --version"
   3. Follow prompts for installation
   4. Report mysterious errors so we can learn together
3. Download Unix CLAN
4. Move folder to desired install location (I used ~/Code/unix-clan)
5. Edit installation files in unix-clan/src according to the instructions found in unix-clan/src/0README.TXT
   1. In unix-clan/src/makefile, uncomment all lines under "for Apple Unix AND FreeBSD >= 3.2"
   2. In unix-clan/src/common.h, update the "DEPDIR" variable:
      #define DEPDIR  "<absolute-path-to>/unix-clan/lib"
      (e.g. "/Users/gilgamesh/Code/unix-clan/lib")
6. Compile
   1. Open Terminal and cd into unix-clan/src
   2. type "make"
7. Add unix-clan/unix/bin directory to PATH
   1. Create the ~/.zshrc file if it doesn't already exist
   2. Add the following line to .zshrc:
      export PATH="<absolute-path-to>/unix-clan/unix/bin:$PATH"
   3. Quit and restart Terminal
8. Test
   1. cd into unix-clan/examples
   2. Type "freq sample.cha"

* Compile and serve Github pages locally with Jekyll
1. Install Jekyll, following https://carpentries.github.io/lesson-example/setup.html#jekyll-setup-for-lesson-development
   #+BEGIN_SRC bash
    nix-env -iA nixpkgs.ruby
    nix-env -iA nixpkgs.libxml2
    gem install bundler --user-install
    cd <project_directory>
    bundle install --path vendor/bundle
    bundle update
    #+END_SRC
2. Ignore vendor files in top-level _config.yml:
   #+BEGIN_SRC org
   exclude:
      - Makefile
      - bin/
      - .Rproj.user/
      - Gemfile
      - Gemfile.lock
      - node_modules
      - vendor/bundle/
      - vendor/cache/
      - vendor/gems/
      - vendor/ruby/
      - .vendor/bundle/
      - .vendor/cache/
      - .vendor/gems/
      - .vendor/ruby/
   #+END_SRC
3. Compile page and serve
   #+BEGIN_SRC bash
   make serve
   #+END_SRC

* TO DO
1. Use specific Python and R environments in Jupyter/RStudio
2. Emacs Python/R workflow
   1. Conda environments and Anaconda mode: https://github.com/necaris/conda.el
   2. R environments
   3. graphs, tables, and other output
3. sorting by file/process provides stable sort of files but not directories
4. Fix Xquartz and imagemagick in Emacs (maybe?)
     https://imagemagick.org/script/display.php
     https://imagemagick.org/script/download.php
     https://www.xquartz.org/FAQs.html
5. zsh configuration
   1. [DONE] Customize colors
      https://geoff.greer.fm/lscolors/
   2. completions?
   3. completions for nix?
   4. fish-like syntax highlighting and other modifications?
6. Nix profile management with delegated update (e.g. NPM, apps, conda, R)
7. Export Nix settings

* DEPRECATED Install R using conda
   cf. https://community.rstudio.com/t/why-not-r-via-conda/9438/4
   #+BEGIN_SRC bash
     # conda install -c r r-base # this breaks
     conda install r-essentials      # OR
     conda create -n <env name> r-essentials
   #+END_SRC

* INFO Catalina performance
1. Round-trip for checking scripts - visible on emacs .org file open?
2. Forbid outgoing connections for syspolicyd to api.apple-cloudkit.com via pfctl (command line) or Murus (GUI)?
   #+BEGIN_SRC bash
   # View outgoing permissions connections
   sudo log stream --debug --info --predicate "processImagePath contains 'tccd' OR processImagePath contains 'syspolicyd' OR processImagePath Contains[c] 'taskgated' OR processImagePath contains 'trustd' OR eventMessage Contains[c] 'malware' OR senderImagePath Contains[c] 'security' "
   #+END_SRC
3. Forbid outgoing connections from trustd
4. Check that firewall settings don't block Google sync, Box, etc
